#!/bin/bash

NAME="Arch Hurd Installation"
DESC="`cat /arch/description`"
MENU="Use the UP and DOWN keys to navigate the menus. Use TAB to switch between buttons and ENTER to select."
ANSFILE="/tmp/ans"
MOUNTFILE="/tmp/mountpoints"
PKGSFILE="/tmp/packages"
CONFIGS="`cat /arch/configs`"

function welcome()
{
    dialog --title "$NAME" --msgbox "$DESC" 17 70
}

function mainmenu()
{
    ans=1
    while [[ "$ans" != "" ]] && [[ "$ans" != "6" ]]; do
	dialog --title "Main Menu" --menu "$MENU" 20 45 10 \
            1 "Prepare Hard Drive(s)" \
            2 "Select Packages" \
            3 "Install Packages" \
            4 "Configure System" \
            5 "Install Bootloader" \
            6 "Exit Install" 2>$ANSFILE
	ans=`cat $ANSFILE`
	rm $ANSFILE
	
	case "$ans" in
            "1")      # Prepare Hard Drive(s)
		prephdds
		;;
            "2")      # Select Packages
		choosepkg
		;;
            "3")      # Install Packages
		installpkg
		;;
            "4")      # Configure System
		sysconf
		;;
            "5")      # Install Bootloader
		installgrub
		;;
            "6" | "") # Exit Install
		yousure && exit
		;;
	esac
    done
}

function prephdds()
{
    sect="Prepare Hard Drive(s)"
    showmsg "$sect" "Ensure any hard drive and partition device nodes have been created with MAKEDEV before continuing."

    pas=`ls /dev/hd[0-9]s*`
    
    disks=""
    parts=""
    
    dcount=1
    for device in /dev/hd[0-9]; do
        disks="${disks} ${dcount} ${device}"
        dcount=$[ $dcount + 1 ]
    done
	
    pcount=1
    for pa in $pas; do
        parts="${parts} ${pcount} ${pa}"
        pcount=$[ $pcount + 1 ]
    done
    
    ans="1"
    while [[ "$ans" != "" ]] && [[ "$ans" != "4" ]]; do
	dialog --title "$sect" --menu "$MENU" 20 45 10 \
            1 "Partition hard drives" \
            2 "Format partitions" \
            3 "Choose mount points" \
            4 "Return to Main Menu" 2>$ANSFILE
	ans=`cat $ANSFILE`
	rm $ANSFILE

        case "$ans" in
            "1") # Partition hard drives
                dialog --title "Partition hard drives" --menu "$MENU" 20 45 10 $disks 2>$ANSFILE
		ans=`cat $ANSFILE`
		rm $ANSFILE

		ans=`echo "$disks" | sed "s/.* $ans \(\/dev\/hd[0-9]\).*/\1/"`

		if [[ -e $ans ]]; then
		    yousuredata && cfdisk $ans
		fi

		yesno "Reboot required" "You must reboot for GNU Mach to re-read the partition tables, do you wish to do so now?" && reboot
                ;;

            "2") # Format partitions
		ans=0
		while [[ "$ans" != "$pcount" ]]; do
		    dialog --title "Format Partitions" --menu "$MENU" 20 45 10 $parts $pcount Return 2>$ANSFILE
		    ans=`cat $ANSFILE`
		    rm $ANSFILE

		    if [[ "$ans" != "$pcount" ]]; then
			ans=`echo "$parts" | sed "s/.* $ans \(\/dev\/hd[0-9]s[1-9]\).*/\1/"`
			
			if [[ -e $ans ]]; then
			    dialog --title "Format Partitions" --menu "$MENU" 20 45 10 1 "ext2" 2 "swap" 2>$ANSFILE
			    ans2=`cat $ANSFILE`
			    rm $ANSFILE
			    
			    case $ans2 in
				"1")
				    yousuredata && mkfs.ext2 $ans
				    ;;
				"2")
				    yousuredata && mkswap $ans
				    ;;
			    esac
			fi
		    fi
		done
                ;;

            "3") # Choose mount points
		ans=0
		while [[ "$ans1" != "$pcount" ]]; do
		    dialog --title "Choose mount points" --menu "$MENU" 20 45 10 $parts $pcount "Return" 2>$ANSFILE
		    ans1=`cat $ANSFILE`
		    rm $ANSFILE

		    if [[ "$ans1" != "$pcount" ]]; then
			ans1=`echo "$parts" | sed "s/.* $ans1 \(\/dev\/hd[0-9]s[1-9]\).*/\1/"`

			dialog --title "Choose mount points" --inputbox "Enter mount location (or 'swap'):" 20 45 2>$ANSFILE
			ans2=`cat $ANSFILE`
			rm $ANSFILE 
			
			if grep -q "$ans1:" $MOUNTFILE; then
			    mpoint=`grep "$ans1:" $MOUNTFILE | sed 's/.*://'`
			    nans1=$(echo "$ans1" | sed 's/\//\\\//g')

			    yesno "Conflicting mount point" "$ans1 is already mounted to $mpoint; continue, removing the preexisting mount point?" && sed -i "/^$nans2:.*\$/d" $MOUNTFILE
			fi
			
			if grep -q ":$ans2" $MOUNTFILE && [[ "$ans2" != "swap" ]]; then
			    mpoint=`grep ":$ans2" $MOUNTFILE | sed 's/:.*//'`
			    nans2=$(echo "$ans2" | sed 's/\//\\\//g')

			    yesno "Conflicting mount point" "$ans2 is already in use by $mpoint; continue, removing the preexisting mount point?" && sed -i "/^.*:$nans2\$/d" $MOUNTFILE
			    
			    echo "/^.*:$nans2\$/d"
			    read
			fi
		    
			echo "$ans1:$ans2" >> $MOUNTFILE
		    fi
		done
		;;
        esac
    done
}

function choosepkg()
{
    sect="Select Packages"
    
    if [[ -e $MOUNTFILE ]]; then
	packages=""
	pacman -Qqg base base-devel | sort | \
	while read pkg; do
	    on="on"
	    if [[ -f $PKGSFILE ]] && ! grep -q $pkg $PKGSFILE; then
		on="off"
	    fi

	    packages="$packages $pkg \"`pacman -Qi $pkg | grep Description | sed 's/.*: //'`\" $on"
	done

	dialog --checklist "$sect" 20 45 10 $packages 2>$PKGSFILE
	tr -d '"' < $PKGSFILE | tr ' ' "\n" > $PKGSFILE
    else
	showmsg "$sect" "You need to prepare the hard drives before you can do this!"
    fi
}

function installpkg()
{
    sect="Install Packages"

    if [[ -e $PKGSFILE ]]; then
	if yesno "$sect" "Are you sure you want to comit to the installation?"; then
	    sort $MOUNTFILE | \
	    while read $mount; do
		device=`echo $mount | sed 's/:.*//'`
		mpoint=`echo $mount | sed 's/.*://'`

		if [[ "$device" == "swap" ]]; then
		    echo "$device none swap sw 0 0" >> /tmp/fstab
		else
		    dpass="0 0"
		    if [[ "$mpoint" == "/" ]]; then
			dpass="1 1"
		    fi

		    echo "$device $mpoint ext2 rw $dpass" >> /tmp/fstab

		    if [[ ! -d /mnt$mpoint ]]; then
			mkdir -p /mnt$mpoint
		    fi

		    mount -t ext2 $device /mnt$mpoint
		fi

		mv /tmp/fstab /mnt/etc/fstab

		clear
		mkdir -p /mnt/var/lib/pacman
		pacman -S $(cat $PKGFILE) --noconfirm --config /etc/pacman-mnt.conf
		showmsg "$sect" "Packages have been installed."
	    done
	fi
    else
	showmsg "$sect" "You need to select the packages before you can do this!"
    fi
}

function sysconf()
{
    sect="Configure System"

    if [[ -f /mnt/etc/fstab ]]; then
	ans=0
	while ! echo $CONFIGS | grep -q "^$ans Return"; do
	    dialog --title "$sect" --menu "$MENU" 20 45 10 $CONFIGS 2>$ANSFILE
	    ans=`cat $ANSFILE`
	    rm $ANSFILE

	    cfg=`echo $CONFIGS | grep -q "^$ans" | sed 's/$ans //'`
	    if [[ -e /mnt$cfg ]]; then
		nano /mnt$cfg
	    elif [[ "$cfg" == "\"Root Password\"" ]]; then
		chroot /mnt "passwd root"
	    fi
	done
    else
	showmsg "$sect" "You need to install the packages before you can do this!"
    fi
}

function installgrub()
{
    sect="Install Bootloader"
    if [[ -f /mnt/etc/fstab ]]; then
	cp -a /mnt/lib/grub/i386-pc/* /mnt/boot/grub/

	showmsg "$sect" "You must edit the GRUB configuration before you can continue."
	nano /mnt/boot/grub/menu.lst

	dialog --title "$sect" --inputbox "Enter device to install GRUB to:" 20 45 2>$ANSFILE
	ans=`cat $ANSFILE`
	rm $ANSFILE 

	grub-install $ans
	
	showmsg "$sect" "GRUB has been installed. You should now reboot into your newly-installed Arch Hurd system."
    else
	showmsg "$sect" "You need to install the packages before you can do this!"
    fi
}

function yesno()
{
    dialog --title "$1" --yesno "$2" 6 40
}

function yousure()
{
    yesno "$NAME" "Are you sure you want to exit the installation?"
}

function yousuredata()
{
    yesno "Warning" "This will destroy data on your HDD. Are you sure you want to continue?"
}

function showmsg()
{
    dialog --title "$1" --msgbox "$2" 8 70
}

echo "$NAME starting..."
welcome
mainmenu
