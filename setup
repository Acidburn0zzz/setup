#!/bin/bash

NAME="Arch Hurd Installation"
DESC="`cat /arch/description`"
MENU="Use the UP and DOWN keys to navigate the menus. Use TAB to switch between buttons and ENTER to select."
ANSFILE="/tmp/ans"
MOUNTFILE="/tmp/mountpoints"
PKGSFILE="/tmp/packages"
INSTALLDIR="/mnt"

function welcome()
{
    dialog --title "$NAME" --msgbox "$DESC" 17 70
}

function mainmenu()
{
    ans=1
    while [[ "$ans" != "" ]] && [[ "$ans" != "6" ]]; do
	dialog --title "Main Menu" --menu "$MENU" 20 45 10 \
            1 "Prepare Hard Drive(s)" \
            2 "Select Packages" \
            3 "Install System" \
            4 "Configure System" \
            5 "Exit Install" 2>$ANSFILE
	ans=`cat $ANSFILE`
	rm $ANSFILE
	
	case "$ans" in
            "1")      # Prepare Hard Drive(s)
		prephdds
		;;
            "2")      # Select Packages
		choosepkg
		;;
            "3")      # Install System
		installsys
		;;
            "4")      # Configure System
		sysconf
		;;
            "5")      # Exit installer
		yesno "$NAME" "Are you sure you want to exit the installation?" && exit
		;;
	esac
    done
}

function prephdds()
{
    sect="Prepare Hard Drive(s)"
    showmsg "$sect" "Ensure any hard drive and partition device nodes have been created with MAKEDEV before continuing."

    disks=""
    parts=""
    
    dcount=1
    for device in /dev/hd[0-9]; do
        disks="${disks} ${dcount} ${device}"
        parts="${parts} ${dcount} ${device}"
        dcount=$[ $dcount + 1 ]
    done
	
    pcount=$dcount
    for pa in /dev/hd[0-9]s*; do
        parts="${parts} ${pcount} ${pa}"
        pcount=$[ $pcount + 1 ]
    done
	
    ans="1"
    while [[ "$ans" != "" ]] && [[ "$ans" != "4" ]]; do
	dialog --title "$sect" --menu "$MENU" 20 45 10 \
            1 "Partition hard drives" \
            2 "Format partitions" \
            3 "Choose mount points" \
            4 "Return to Main Menu" 2>$ANSFILE
	ans=`cat $ANSFILE`
	rm $ANSFILE

        case "$ans" in
            "1") # Partition hard drives
                dialog --title "Partition hard drives" --menu "$MENU" 20 45 10 $disks 2>$ANSFILE
		ans1=`cat $ANSFILE`
		rm $ANSFILE

		ans1=`echo "$disks" | sed "s/.* $ans1 \(\/dev\/hd[0-9]\).*/\1/"`

		if [[ -e $ans1 ]]; then
		    yesno "Warning" "This will destroy data on your HDD. Are you sure you want to continue?" && cfdisk $ans1
		fi

		yesnobig "Reboot required" "You must reboot for GNU Mach to re-read the partition tables, do you wish to do so now?" && reboot
                ;;

            "2") # Format partitions
		ans1=0
		while [[ "$ans1" != "$pcount" ]]; do
		    dialog --title "Format Partitions" --menu "$MENU" 20 45 10 $parts $pcount Return 2>$ANSFILE
		    ans1=`cat $ANSFILE`
		    rm $ANSFILE

		    if [[ "$ans1" != "$pcount" ]]; then
                        ans1=`echo "$parts" | sed "s:\(^\| .* \)$ans1 \(/dev/hd[0-9s]*\).*:\2:" | sed 's:^1::'`
			
			if [[ -e $ans1 ]]; then
			    dialog --title "Format Partitions" --menu "$MENU" 20 45 10 1 "ext2" 2 "swap" 2>$ANSFILE
			    ans2=`cat $ANSFILE`
			    rm $ANSFILE
			    
			    case $ans2 in
				"1")
				    yesno "Warning" "This will destroy data on your HDD. Are you sure you want to continue?" && \
				    mkfs.ext2 -b 4096 -I 128 $ans1
				    ;;
				"2")
				    yesno "Warning" "This will destroy data on your HDD. Are you sure you want to continue?" && \
				    mkswap $ans1
				    ;;
			    esac
			fi
		    fi
		done
                ;;

            "3") # Choose mount points
		ans1=0
		while [[ "$ans1" != "$pcount" ]]; do
		    dialog --title "Choose mount points" --menu "$MENU" 20 45 10 $parts $pcount "Return" 2>$ANSFILE
		    ans1=`cat $ANSFILE`
		    rm $ANSFILE

		    if [[ "$ans1" != "$pcount" ]]; then
                        ans1=`echo "$parts" | sed "s:\(^\| .* \)$ans1 \(/dev/hd[0-9s]*\).*:\2:" | sed 's:^1::'`

			dialog --title "Choose mount points" --inputbox "Enter mount location (or 'swap'):" 8 45 2>$ANSFILE
			ans2=`cat $ANSFILE`
			rm $ANSFILE 
			
			if grep -q ":$ans1" $MOUNTFILE; then
			    mpoint=`grep ":$ans1" $MOUNTFILE | sed 's/:.*//'`
			    nans1=$(echo "$ans1" | sed 's/\//\\\//g')

			    yesno "Conflicting mount point" "$ans1 is already mounted to $mpoint; continue, removing the preexisting mount point?" && sed -i "/^$nans1:.*\$/d" $MOUNTFILE
			fi
			
			if grep -q "$ans2:" $MOUNTFILE && [[ "$ans2" != "swap" ]]; then
			    mpoint=`grep "$ans2:" $MOUNTFILE | sed 's/.*://'`
			    nans2=$(echo "$ans2" | sed 's/\//\\\//g')

			    yesno "Conflicting mount point" "$ans2 is already in use by $mpoint; continue, removing the preexisting mount point?" && sed -i "/^.*:$nans2\$/d" $MOUNTFILE
			fi
		    
			echo "$ans2:$ans1" >> $MOUNTFILE
		    fi
		done
		;;
        esac
    done
}

function choosepkg()
{
    sect="Select Packages"
    
    if [[ -e $MOUNTFILE ]]; then
	echo "Generating package list..."

	packages=""
	pkgs=`pacman -Sqg base base-devel | sort | grep -v "could not open file"`

	for pkg in $pkgs; do
	    on="on"
	    if [[ -f $PKGSFILE ]] && ! grep -q $pkg $PKGSFILE; then
		on="off"
	    fi

	    packages="$packages $pkg \"`pacman -Si $pkg | grep Description | sed 's/.*: //'`\" $on"
	done

	# Bash is silly and doesn't interpret $packages properly unless we do this...
	bash -c "dialog --checklist \"$sect\" 20 55 10 $packages 2>$PKGSFILE"
	tr -d '"' < $PKGSFILE | tr ' ' "\n" > ${PKGSFILE}-tmp
	mv ${PKGSFILE}-tmp $PKGSFILE
    else
	showmsg "$sect" "You need to prepare the hard drives before you can do this!"
    fi
}

function installsys()
{
    sect="Install System"

    if [[ -e $PKGSFILE ]]; then
	if yesno "$sect" "Are you sure you want to commit to the installation?"; then

	    echo "Mounting filesystems and generating fstab..."
	    sort $MOUNTFILE | \
	    while read mount; do
		device=`echo $mount | sed 's/.*://'`
		mpoint=`echo $mount | sed 's/:.*//'`

		if [[ "$mpoint" == "swap" ]]; then
		    echo "$device none swap defaults 0 0" >> /tmp/fstab
		    swapon $device
		else
		    dpass="0 0"
                    mountto=${INSTALLDIR}${mpoint}

		    if [[ "$mpoint" == "/" ]]; then
			dpass="1 1"
                        mountto=$INSTALLDIR
                    fi

		    echo "$device $mpoint ext2 defaults $dpass" >> /tmp/fstab
                    
		    if [[ ! -e $mountto ]]; then
			mkdir -p $mountto
		    fi
                    
		    settrans -a $mountto /hurd/ext2fs $device
		    fsysopts $mountto --writable
		fi

	    done
	    
	    mkdir -p ${INSTALLDIR}/var/log
	    mkdir -p ${INSTALLDIR}/var/lib/pacman

	    pacman -Syy --config /etc/pacman-mnt.conf
	    pacman -S $(cat $PKGSFILE) --noconfirm --config /etc/pacman-mnt.conf

	    mv /tmp/fstab ${INSTALLDIR}/etc/fstab

	    pushd ${INSTALLDIR}/dev
      # Make devices
	    MAKEDEV --devdir=/dev std ptyp
	    MAKEDEV --devdir=/dev $(ls /dev | grep hd)

      # Random translators
      settrans -cp random /hurd/random --secure
      settrans -cp urandom /hurd/random --fast
      chmod 0644 {u,}random

      # Console input repeaters
      ln -sf cons/kbd kbd
      ln -sf cons/mouse mouse
	    popd

      cp ${INSTALLDIR}/lib/grub/i386-pc/* ${INSTALLDIR}/boot/grub/

	    showmsg "$sect" "System has been installed."
	fi
    else
	showmsg "$sect" "You need to select the packages before you can do this!"
    fi
}

function sysconf()
{
    sect="Configure System"

    if [[ -f ${INSTALLDIR}/etc/fstab ]]; then
	ans=0
	while ! grep -q "^$ans Return" /arch/configs; do
	    bash -c "dialog --title \"$sect\" --menu \"$MENU\" 20 45 10 $(cat /arch/configs | tr "\n" ' ') 2>$ANSFILE"
	    ans=`cat $ANSFILE`
	    rm $ANSFILE

	    cfg=`grep "^$ans " /arch/configs | sed 's/[0-9 ]*//'`
	    if [[ -e ${INSTALLDIR}${cfg} ]]; then
		nano ${INSTALLDIR}${cfg}
	    elif [[ "$cfg" == '"Root Password"' ]]; then
		chroot ${INSTALLDIR} /usr/bin/passwd root
	    fi

            if [[ "$cfg" == "/etc/locale.gen" ]]; then
                showmsg "$sect" "After rebooting into your Arch Hurd installation you will need to run 'locale-gen'."
            fi
	done
	#echo "Generating locales..."
	#chroot ${INSTALLDIR} /usr/sbin/locale-gen
    else
	showmsg "$sect" "You need to install the packages before you can do this!"
    fi
}

function yesno()
{
    dialog --title "$1" --yesno "$2" 6 40
}

function yesnobig()
{
    dialog --title "$1" --yesno "$2" 8 40
}

function showmsg()
{
    dialog --title "$1" --msgbox "$2" 8 70
}

echo "$NAME starting..."
welcome
mainmenu
